"""
Gabarito dos exerc√≠cios
A seguir encontra-se uma sugest√£o de solu√ß√£o para o exerc√≠cio proposto.
Exerc√≠cio 1: Aprimorando a classe Deque - Nossa classe Deque j√° atende as
principais opera√ß√µes que esse TAD nos oferece üöÄ mas que tal melhorarmos? Para
isso voc√™ deve adicionar os seguintes m√©todos:
a. clear(self) - Este m√©todo deve ser respons√°vel por limpar a estrutura,
eliminando todos os elementos contidos dentro da deque.
"""


# # 1
# def clear(self):
#     self._data.clear()

# # 2
# def clear(self):
#     self._data = list()

# # 3
# def clear(self):
#     del self._data[:]

# # 4
# def clear(self):
#     while self._data:
#         self.pop_back()

# 5
def clear(self):
    while self._data:
        self.pop_front()


"""
b. exists(self, value) - Este m√©todo deve ser usado para indicar se o valor do
argumento existe em nossa estrutura. Retorne True se existir e False caso
contr√°rio.
Nota: Fique a vontade para escolher por qual extremidade ser√° iniciada a
consulta.
"""


# 1
def exists(self, value):
    return value in self._data

# #2
# def exists(self, value):
#     return self._data.count(value) > 0


"""
c. peek(self, position, order) - Este m√©todo deve ser usado para retornar o
valor do conte√∫do da posi√ß√£o indicada. A peculiaridade desse m√©todo √© a ordem
que essa consulta deve ser feita. Caso o campo order n√£o seja informado, a
consulta deve ser realizada atrav√©s da extremidade da esquerda front, no
entanto, caso o campo possua o valor desc , a consulta deve ser atrav√©s da
extremidade da direita back .
Como exemplo, assuma uma deque composto com os seguintes elementos:
"""


# # 1
# def peek(self, position, order=None):
#     if position < 0 or position > len(self) - 1:
#         return None
#     if not order:
#         return self._data[position]
#     return self._data[::-1][position]

# 2
def peek(self, position, order=None):
    if position < 0 or position > len(self) - 1:
        return None

    if not order:
        for index, value in enumerate(self._data):
            if position == index:
                return value
    else:
        for index, value in enumerate(self._data[::-1]):
            if position == index:
                return value

    return None
